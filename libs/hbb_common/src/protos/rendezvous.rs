// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `rendezvous.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.RegisterPeer)
pub struct RegisterPeer {
    // message fields
    // @@protoc_insertion_point(field:hbb.RegisterPeer.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.RegisterPeer.serial)
    pub serial: i32,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.RegisterPeer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPeer {
    fn default() -> &'a RegisterPeer {
        <RegisterPeer as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPeer {
    pub fn new() -> RegisterPeer {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RegisterPeer| { &m.id },
            |m: &mut RegisterPeer| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serial",
            |m: &RegisterPeer| { &m.serial },
            |m: &mut RegisterPeer| { &mut m.serial },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPeer>(
            "RegisterPeer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterPeer {
    const NAME: &'static str = "RegisterPeer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                16 => {
                    self.serial = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.serial != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.serial);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.serial != 0 {
            os.write_int32(2, self.serial)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPeer {
        RegisterPeer::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.serial = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPeer {
        static instance: RegisterPeer = RegisterPeer {
            id: ::std::string::String::new(),
            serial: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisterPeer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterPeer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterPeer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPeer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.RegisterPeerResponse)
pub struct RegisterPeerResponse {
    // message fields
    // @@protoc_insertion_point(field:hbb.RegisterPeerResponse.request_pk)
    pub request_pk: bool,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.RegisterPeerResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPeerResponse {
    fn default() -> &'a RegisterPeerResponse {
        <RegisterPeerResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPeerResponse {
    pub fn new() -> RegisterPeerResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request_pk",
            |m: &RegisterPeerResponse| { &m.request_pk },
            |m: &mut RegisterPeerResponse| { &mut m.request_pk },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPeerResponse>(
            "RegisterPeerResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterPeerResponse {
    const NAME: &'static str = "RegisterPeerResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.request_pk = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.request_pk != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.request_pk != false {
            os.write_bool(2, self.request_pk)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPeerResponse {
        RegisterPeerResponse::new()
    }

    fn clear(&mut self) {
        self.request_pk = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPeerResponse {
        static instance: RegisterPeerResponse = RegisterPeerResponse {
            request_pk: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisterPeerResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterPeerResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterPeerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPeerResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.PunchHoleRequest)
pub struct PunchHoleRequest {
    // message fields
    // @@protoc_insertion_point(field:hbb.PunchHoleRequest.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PunchHoleRequest.nat_type)
    pub nat_type: ::protobuf::EnumOrUnknown<NatType>,
    // @@protoc_insertion_point(field:hbb.PunchHoleRequest.licence_key)
    pub licence_key: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PunchHoleRequest.conn_type)
    pub conn_type: ::protobuf::EnumOrUnknown<ConnType>,
    // @@protoc_insertion_point(field:hbb.PunchHoleRequest.token)
    pub token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.PunchHoleRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PunchHoleRequest {
    fn default() -> &'a PunchHoleRequest {
        <PunchHoleRequest as ::protobuf::Message>::default_instance()
    }
}

impl PunchHoleRequest {
    pub fn new() -> PunchHoleRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PunchHoleRequest| { &m.id },
            |m: &mut PunchHoleRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nat_type",
            |m: &PunchHoleRequest| { &m.nat_type },
            |m: &mut PunchHoleRequest| { &mut m.nat_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "licence_key",
            |m: &PunchHoleRequest| { &m.licence_key },
            |m: &mut PunchHoleRequest| { &mut m.licence_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "conn_type",
            |m: &PunchHoleRequest| { &m.conn_type },
            |m: &mut PunchHoleRequest| { &mut m.conn_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &PunchHoleRequest| { &m.token },
            |m: &mut PunchHoleRequest| { &mut m.token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PunchHoleRequest>(
            "PunchHoleRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PunchHoleRequest {
    const NAME: &'static str = "PunchHoleRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                16 => {
                    self.nat_type = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.licence_key = is.read_string()?;
                },
                32 => {
                    self.conn_type = is.read_enum_or_unknown()?;
                },
                42 => {
                    self.token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.nat_type != ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            my_size += ::protobuf::rt::int32_size(2, self.nat_type.value());
        }
        if !self.licence_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.licence_key);
        }
        if self.conn_type != ::protobuf::EnumOrUnknown::new(ConnType::DEFAULT_CONN) {
            my_size += ::protobuf::rt::int32_size(4, self.conn_type.value());
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.nat_type != ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.nat_type))?;
        }
        if !self.licence_key.is_empty() {
            os.write_string(3, &self.licence_key)?;
        }
        if self.conn_type != ::protobuf::EnumOrUnknown::new(ConnType::DEFAULT_CONN) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.conn_type))?;
        }
        if !self.token.is_empty() {
            os.write_string(5, &self.token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PunchHoleRequest {
        PunchHoleRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.nat_type = ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT);
        self.licence_key.clear();
        self.conn_type = ::protobuf::EnumOrUnknown::new(ConnType::DEFAULT_CONN);
        self.token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PunchHoleRequest {
        static instance: PunchHoleRequest = PunchHoleRequest {
            id: ::std::string::String::new(),
            nat_type: ::protobuf::EnumOrUnknown::from_i32(0),
            licence_key: ::std::string::String::new(),
            conn_type: ::protobuf::EnumOrUnknown::from_i32(0),
            token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PunchHoleRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PunchHoleRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PunchHoleRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PunchHoleRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.PunchHole)
pub struct PunchHole {
    // message fields
    // @@protoc_insertion_point(field:hbb.PunchHole.socket_addr)
    pub socket_addr: ::bytes::Bytes,
    // @@protoc_insertion_point(field:hbb.PunchHole.relay_server)
    pub relay_server: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PunchHole.nat_type)
    pub nat_type: ::protobuf::EnumOrUnknown<NatType>,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.PunchHole.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PunchHole {
    fn default() -> &'a PunchHole {
        <PunchHole as ::protobuf::Message>::default_instance()
    }
}

impl PunchHole {
    pub fn new() -> PunchHole {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &PunchHole| { &m.socket_addr },
            |m: &mut PunchHole| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &PunchHole| { &m.relay_server },
            |m: &mut PunchHole| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nat_type",
            |m: &PunchHole| { &m.nat_type },
            |m: &mut PunchHole| { &mut m.nat_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PunchHole>(
            "PunchHole",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PunchHole {
    const NAME: &'static str = "PunchHole";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.socket_addr = is.read_tokio_bytes()?;
                },
                18 => {
                    self.relay_server = is.read_string()?;
                },
                24 => {
                    self.nat_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.relay_server);
        }
        if self.nat_type != ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            my_size += ::protobuf::rt::int32_size(3, self.nat_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(2, &self.relay_server)?;
        }
        if self.nat_type != ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.nat_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PunchHole {
        PunchHole::new()
    }

    fn clear(&mut self) {
        self.socket_addr.clear();
        self.relay_server.clear();
        self.nat_type = ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PunchHole {
        static instance: PunchHole = PunchHole {
            socket_addr: ::bytes::Bytes::new(),
            relay_server: ::std::string::String::new(),
            nat_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PunchHole {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PunchHole").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PunchHole {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PunchHole {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.TestNatRequest)
pub struct TestNatRequest {
    // message fields
    // @@protoc_insertion_point(field:hbb.TestNatRequest.serial)
    pub serial: i32,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.TestNatRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestNatRequest {
    fn default() -> &'a TestNatRequest {
        <TestNatRequest as ::protobuf::Message>::default_instance()
    }
}

impl TestNatRequest {
    pub fn new() -> TestNatRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serial",
            |m: &TestNatRequest| { &m.serial },
            |m: &mut TestNatRequest| { &mut m.serial },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestNatRequest>(
            "TestNatRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestNatRequest {
    const NAME: &'static str = "TestNatRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.serial = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.serial != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.serial);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.serial != 0 {
            os.write_int32(1, self.serial)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestNatRequest {
        TestNatRequest::new()
    }

    fn clear(&mut self) {
        self.serial = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestNatRequest {
        static instance: TestNatRequest = TestNatRequest {
            serial: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestNatRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestNatRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestNatRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestNatRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.TestNatResponse)
pub struct TestNatResponse {
    // message fields
    // @@protoc_insertion_point(field:hbb.TestNatResponse.port)
    pub port: i32,
    // @@protoc_insertion_point(field:hbb.TestNatResponse.cu)
    pub cu: ::protobuf::MessageField<ConfigUpdate>,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.TestNatResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestNatResponse {
    fn default() -> &'a TestNatResponse {
        <TestNatResponse as ::protobuf::Message>::default_instance()
    }
}

impl TestNatResponse {
    pub fn new() -> TestNatResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "port",
            |m: &TestNatResponse| { &m.port },
            |m: &mut TestNatResponse| { &mut m.port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ConfigUpdate>(
            "cu",
            |m: &TestNatResponse| { &m.cu },
            |m: &mut TestNatResponse| { &mut m.cu },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestNatResponse>(
            "TestNatResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestNatResponse {
    const NAME: &'static str = "TestNatResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.port = is.read_int32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cu)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.port != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.port);
        }
        if let Some(v) = self.cu.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.port != 0 {
            os.write_int32(1, self.port)?;
        }
        if let Some(v) = self.cu.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestNatResponse {
        TestNatResponse::new()
    }

    fn clear(&mut self) {
        self.port = 0;
        self.cu.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestNatResponse {
        static instance: TestNatResponse = TestNatResponse {
            port: 0,
            cu: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestNatResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestNatResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestNatResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestNatResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.PunchHoleSent)
pub struct PunchHoleSent {
    // message fields
    // @@protoc_insertion_point(field:hbb.PunchHoleSent.socket_addr)
    pub socket_addr: ::bytes::Bytes,
    // @@protoc_insertion_point(field:hbb.PunchHoleSent.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PunchHoleSent.relay_server)
    pub relay_server: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PunchHoleSent.nat_type)
    pub nat_type: ::protobuf::EnumOrUnknown<NatType>,
    // @@protoc_insertion_point(field:hbb.PunchHoleSent.version)
    pub version: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.PunchHoleSent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PunchHoleSent {
    fn default() -> &'a PunchHoleSent {
        <PunchHoleSent as ::protobuf::Message>::default_instance()
    }
}

impl PunchHoleSent {
    pub fn new() -> PunchHoleSent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &PunchHoleSent| { &m.socket_addr },
            |m: &mut PunchHoleSent| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PunchHoleSent| { &m.id },
            |m: &mut PunchHoleSent| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &PunchHoleSent| { &m.relay_server },
            |m: &mut PunchHoleSent| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nat_type",
            |m: &PunchHoleSent| { &m.nat_type },
            |m: &mut PunchHoleSent| { &mut m.nat_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &PunchHoleSent| { &m.version },
            |m: &mut PunchHoleSent| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PunchHoleSent>(
            "PunchHoleSent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PunchHoleSent {
    const NAME: &'static str = "PunchHoleSent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.socket_addr = is.read_tokio_bytes()?;
                },
                18 => {
                    self.id = is.read_string()?;
                },
                26 => {
                    self.relay_server = is.read_string()?;
                },
                32 => {
                    self.nat_type = is.read_enum_or_unknown()?;
                },
                42 => {
                    self.version = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.relay_server);
        }
        if self.nat_type != ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            my_size += ::protobuf::rt::int32_size(4, self.nat_type.value());
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(3, &self.relay_server)?;
        }
        if self.nat_type != ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.nat_type))?;
        }
        if !self.version.is_empty() {
            os.write_string(5, &self.version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PunchHoleSent {
        PunchHoleSent::new()
    }

    fn clear(&mut self) {
        self.socket_addr.clear();
        self.id.clear();
        self.relay_server.clear();
        self.nat_type = ::protobuf::EnumOrUnknown::new(NatType::UNKNOWN_NAT);
        self.version.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PunchHoleSent {
        static instance: PunchHoleSent = PunchHoleSent {
            socket_addr: ::bytes::Bytes::new(),
            id: ::std::string::String::new(),
            relay_server: ::std::string::String::new(),
            nat_type: ::protobuf::EnumOrUnknown::from_i32(0),
            version: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PunchHoleSent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PunchHoleSent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PunchHoleSent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PunchHoleSent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.RegisterPk)
pub struct RegisterPk {
    // message fields
    // @@protoc_insertion_point(field:hbb.RegisterPk.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.RegisterPk.uuid)
    pub uuid: ::bytes::Bytes,
    // @@protoc_insertion_point(field:hbb.RegisterPk.pk)
    pub pk: ::bytes::Bytes,
    // @@protoc_insertion_point(field:hbb.RegisterPk.old_id)
    pub old_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.RegisterPk.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPk {
    fn default() -> &'a RegisterPk {
        <RegisterPk as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPk {
    pub fn new() -> RegisterPk {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RegisterPk| { &m.id },
            |m: &mut RegisterPk| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &RegisterPk| { &m.uuid },
            |m: &mut RegisterPk| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pk",
            |m: &RegisterPk| { &m.pk },
            |m: &mut RegisterPk| { &mut m.pk },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "old_id",
            |m: &RegisterPk| { &m.old_id },
            |m: &mut RegisterPk| { &mut m.old_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPk>(
            "RegisterPk",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterPk {
    const NAME: &'static str = "RegisterPk";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.uuid = is.read_tokio_bytes()?;
                },
                26 => {
                    self.pk = is.read_tokio_bytes()?;
                },
                34 => {
                    self.old_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.uuid);
        }
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.pk);
        }
        if !self.old_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.old_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.uuid.is_empty() {
            os.write_bytes(2, &self.uuid)?;
        }
        if !self.pk.is_empty() {
            os.write_bytes(3, &self.pk)?;
        }
        if !self.old_id.is_empty() {
            os.write_string(4, &self.old_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPk {
        RegisterPk::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.uuid.clear();
        self.pk.clear();
        self.old_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPk {
        static instance: RegisterPk = RegisterPk {
            id: ::std::string::String::new(),
            uuid: ::bytes::Bytes::new(),
            pk: ::bytes::Bytes::new(),
            old_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisterPk {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterPk").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterPk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPk {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.RegisterPkResponse)
pub struct RegisterPkResponse {
    // message fields
    // @@protoc_insertion_point(field:hbb.RegisterPkResponse.result)
    pub result: ::protobuf::EnumOrUnknown<register_pk_response::Result>,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.RegisterPkResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterPkResponse {
    fn default() -> &'a RegisterPkResponse {
        <RegisterPkResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterPkResponse {
    pub fn new() -> RegisterPkResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "result",
            |m: &RegisterPkResponse| { &m.result },
            |m: &mut RegisterPkResponse| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterPkResponse>(
            "RegisterPkResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterPkResponse {
    const NAME: &'static str = "RegisterPkResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.result != ::protobuf::EnumOrUnknown::new(register_pk_response::Result::OK) {
            my_size += ::protobuf::rt::int32_size(1, self.result.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.result != ::protobuf::EnumOrUnknown::new(register_pk_response::Result::OK) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.result))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterPkResponse {
        RegisterPkResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::protobuf::EnumOrUnknown::new(register_pk_response::Result::OK);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterPkResponse {
        static instance: RegisterPkResponse = RegisterPkResponse {
            result: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisterPkResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterPkResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterPkResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterPkResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RegisterPkResponse`
pub mod register_pk_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:hbb.RegisterPkResponse.Result)
    pub enum Result {
        // @@protoc_insertion_point(enum_value:hbb.RegisterPkResponse.Result.OK)
        OK = 0,
        // @@protoc_insertion_point(enum_value:hbb.RegisterPkResponse.Result.UUID_MISMATCH)
        UUID_MISMATCH = 2,
        // @@protoc_insertion_point(enum_value:hbb.RegisterPkResponse.Result.ID_EXISTS)
        ID_EXISTS = 3,
        // @@protoc_insertion_point(enum_value:hbb.RegisterPkResponse.Result.TOO_FREQUENT)
        TOO_FREQUENT = 4,
        // @@protoc_insertion_point(enum_value:hbb.RegisterPkResponse.Result.INVALID_ID_FORMAT)
        INVALID_ID_FORMAT = 5,
        // @@protoc_insertion_point(enum_value:hbb.RegisterPkResponse.Result.NOT_SUPPORT)
        NOT_SUPPORT = 6,
        // @@protoc_insertion_point(enum_value:hbb.RegisterPkResponse.Result.SERVER_ERROR)
        SERVER_ERROR = 7,
    }

    impl ::protobuf::Enum for Result {
        const NAME: &'static str = "Result";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Result> {
            match value {
                0 => ::std::option::Option::Some(Result::OK),
                2 => ::std::option::Option::Some(Result::UUID_MISMATCH),
                3 => ::std::option::Option::Some(Result::ID_EXISTS),
                4 => ::std::option::Option::Some(Result::TOO_FREQUENT),
                5 => ::std::option::Option::Some(Result::INVALID_ID_FORMAT),
                6 => ::std::option::Option::Some(Result::NOT_SUPPORT),
                7 => ::std::option::Option::Some(Result::SERVER_ERROR),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Result] = &[
            Result::OK,
            Result::UUID_MISMATCH,
            Result::ID_EXISTS,
            Result::TOO_FREQUENT,
            Result::INVALID_ID_FORMAT,
            Result::NOT_SUPPORT,
            Result::SERVER_ERROR,
        ];
    }

    impl ::protobuf::EnumFull for Result {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("RegisterPkResponse.Result").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Result::OK => 0,
                Result::UUID_MISMATCH => 1,
                Result::ID_EXISTS => 2,
                Result::TOO_FREQUENT => 3,
                Result::INVALID_ID_FORMAT => 4,
                Result::NOT_SUPPORT => 5,
                Result::SERVER_ERROR => 6,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Result {
        fn default() -> Self {
            Result::OK
        }
    }

    impl Result {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("RegisterPkResponse.Result")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.PunchHoleResponse)
pub struct PunchHoleResponse {
    // message fields
    // @@protoc_insertion_point(field:hbb.PunchHoleResponse.socket_addr)
    pub socket_addr: ::bytes::Bytes,
    // @@protoc_insertion_point(field:hbb.PunchHoleResponse.pk)
    pub pk: ::bytes::Bytes,
    // @@protoc_insertion_point(field:hbb.PunchHoleResponse.failure)
    pub failure: ::protobuf::EnumOrUnknown<punch_hole_response::Failure>,
    // @@protoc_insertion_point(field:hbb.PunchHoleResponse.relay_server)
    pub relay_server: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PunchHoleResponse.other_failure)
    pub other_failure: ::std::string::String,
    // message oneof groups
    pub union: ::std::option::Option<punch_hole_response::Union>,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.PunchHoleResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PunchHoleResponse {
    fn default() -> &'a PunchHoleResponse {
        <PunchHoleResponse as ::protobuf::Message>::default_instance()
    }
}

impl PunchHoleResponse {
    pub fn new() -> PunchHoleResponse {
        ::std::default::Default::default()
    }

    // .hbb.NatType nat_type = 5;

    pub fn nat_type(&self) -> NatType {
        match self.union {
            ::std::option::Option::Some(punch_hole_response::Union::NatType(v)) => ::protobuf::EnumOrUnknown::enum_value_or_default(&v),
            _ => NatType::UNKNOWN_NAT,
        }
    }

    pub fn clear_nat_type(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_nat_type(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(punch_hole_response::Union::NatType(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nat_type(&mut self, v: NatType) {
        self.union = ::std::option::Option::Some(punch_hole_response::Union::NatType(::protobuf::EnumOrUnknown::new(v)))
    }

    // bool is_local = 6;

    pub fn is_local(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(punch_hole_response::Union::IsLocal(v)) => v,
            _ => false,
        }
    }

    pub fn clear_is_local(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_is_local(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(punch_hole_response::Union::IsLocal(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_is_local(&mut self, v: bool) {
        self.union = ::std::option::Option::Some(punch_hole_response::Union::IsLocal(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &PunchHoleResponse| { &m.socket_addr },
            |m: &mut PunchHoleResponse| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pk",
            |m: &PunchHoleResponse| { &m.pk },
            |m: &mut PunchHoleResponse| { &mut m.pk },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "failure",
            |m: &PunchHoleResponse| { &m.failure },
            |m: &mut PunchHoleResponse| { &mut m.failure },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &PunchHoleResponse| { &m.relay_server },
            |m: &mut PunchHoleResponse| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_enum_accessors::<_, _>(
            "nat_type",
            |message: &PunchHoleResponse| match &message.union {
                ::std::option::Option::Some(punch_hole_response::Union::NatType(e)) => ::std::option::Option::Some(*e),
                _ => ::std::option::Option::None,
            },
            |message: &mut PunchHoleResponse, e: ::protobuf::EnumOrUnknown<NatType>| {
                message.union = ::std::option::Option::Some(punch_hole_response::Union::NatType(e));
            },
            NatType::UNKNOWN_NAT,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "is_local",
            PunchHoleResponse::has_is_local,
            PunchHoleResponse::is_local,
            PunchHoleResponse::set_is_local,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "other_failure",
            |m: &PunchHoleResponse| { &m.other_failure },
            |m: &mut PunchHoleResponse| { &mut m.other_failure },
        ));
        oneofs.push(punch_hole_response::Union::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PunchHoleResponse>(
            "PunchHoleResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PunchHoleResponse {
    const NAME: &'static str = "PunchHoleResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.socket_addr = is.read_tokio_bytes()?;
                },
                18 => {
                    self.pk = is.read_tokio_bytes()?;
                },
                24 => {
                    self.failure = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.relay_server = is.read_string()?;
                },
                40 => {
                    self.union = ::std::option::Option::Some(punch_hole_response::Union::NatType(is.read_enum_or_unknown()?));
                },
                48 => {
                    self.union = ::std::option::Option::Some(punch_hole_response::Union::IsLocal(is.read_bool()?));
                },
                58 => {
                    self.other_failure = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.pk.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.pk);
        }
        if self.failure != ::protobuf::EnumOrUnknown::new(punch_hole_response::Failure::ID_NOT_EXIST) {
            my_size += ::protobuf::rt::int32_size(3, self.failure.value());
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.relay_server);
        }
        if !self.other_failure.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.other_failure);
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &punch_hole_response::Union::NatType(v) => {
                    my_size += ::protobuf::rt::int32_size(5, v.value());
                },
                &punch_hole_response::Union::IsLocal(v) => {
                    my_size += 1 + 1;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.pk.is_empty() {
            os.write_bytes(2, &self.pk)?;
        }
        if self.failure != ::protobuf::EnumOrUnknown::new(punch_hole_response::Failure::ID_NOT_EXIST) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.failure))?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(4, &self.relay_server)?;
        }
        if !self.other_failure.is_empty() {
            os.write_string(7, &self.other_failure)?;
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &punch_hole_response::Union::NatType(v) => {
                    os.write_enum(5, ::protobuf::EnumOrUnknown::value(&v))?;
                },
                &punch_hole_response::Union::IsLocal(v) => {
                    os.write_bool(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PunchHoleResponse {
        PunchHoleResponse::new()
    }

    fn clear(&mut self) {
        self.socket_addr.clear();
        self.pk.clear();
        self.failure = ::protobuf::EnumOrUnknown::new(punch_hole_response::Failure::ID_NOT_EXIST);
        self.relay_server.clear();
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.other_failure.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PunchHoleResponse {
        static instance: PunchHoleResponse = PunchHoleResponse {
            socket_addr: ::bytes::Bytes::new(),
            pk: ::bytes::Bytes::new(),
            failure: ::protobuf::EnumOrUnknown::from_i32(0),
            relay_server: ::std::string::String::new(),
            other_failure: ::std::string::String::new(),
            union: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PunchHoleResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PunchHoleResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PunchHoleResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PunchHoleResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PunchHoleResponse`
pub mod punch_hole_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:hbb.PunchHoleResponse.union)
    pub enum Union {
        // @@protoc_insertion_point(oneof_field:hbb.PunchHoleResponse.nat_type)
        NatType(::protobuf::EnumOrUnknown<super::NatType>),
        // @@protoc_insertion_point(oneof_field:hbb.PunchHoleResponse.is_local)
        IsLocal(bool),
    }

    impl ::protobuf::Oneof for Union {
    }

    impl ::protobuf::OneofFull for Union {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PunchHoleResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("union").unwrap()).clone()
        }
    }

    impl Union {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Union>("union")
        }
    }
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:hbb.PunchHoleResponse.Failure)
    pub enum Failure {
        // @@protoc_insertion_point(enum_value:hbb.PunchHoleResponse.Failure.ID_NOT_EXIST)
        ID_NOT_EXIST = 0,
        // @@protoc_insertion_point(enum_value:hbb.PunchHoleResponse.Failure.OFFLINE)
        OFFLINE = 2,
        // @@protoc_insertion_point(enum_value:hbb.PunchHoleResponse.Failure.LICENSE_MISMATCH)
        LICENSE_MISMATCH = 3,
        // @@protoc_insertion_point(enum_value:hbb.PunchHoleResponse.Failure.LICENSE_OVERUSE)
        LICENSE_OVERUSE = 4,
    }

    impl ::protobuf::Enum for Failure {
        const NAME: &'static str = "Failure";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Failure> {
            match value {
                0 => ::std::option::Option::Some(Failure::ID_NOT_EXIST),
                2 => ::std::option::Option::Some(Failure::OFFLINE),
                3 => ::std::option::Option::Some(Failure::LICENSE_MISMATCH),
                4 => ::std::option::Option::Some(Failure::LICENSE_OVERUSE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Failure] = &[
            Failure::ID_NOT_EXIST,
            Failure::OFFLINE,
            Failure::LICENSE_MISMATCH,
            Failure::LICENSE_OVERUSE,
        ];
    }

    impl ::protobuf::EnumFull for Failure {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("PunchHoleResponse.Failure").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                Failure::ID_NOT_EXIST => 0,
                Failure::OFFLINE => 1,
                Failure::LICENSE_MISMATCH => 2,
                Failure::LICENSE_OVERUSE => 3,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Failure {
        fn default() -> Self {
            Failure::ID_NOT_EXIST
        }
    }

    impl Failure {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Failure>("PunchHoleResponse.Failure")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.ConfigUpdate)
pub struct ConfigUpdate {
    // message fields
    // @@protoc_insertion_point(field:hbb.ConfigUpdate.serial)
    pub serial: i32,
    // @@protoc_insertion_point(field:hbb.ConfigUpdate.rendezvous_servers)
    pub rendezvous_servers: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.ConfigUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConfigUpdate {
    fn default() -> &'a ConfigUpdate {
        <ConfigUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ConfigUpdate {
    pub fn new() -> ConfigUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serial",
            |m: &ConfigUpdate| { &m.serial },
            |m: &mut ConfigUpdate| { &mut m.serial },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "rendezvous_servers",
            |m: &ConfigUpdate| { &m.rendezvous_servers },
            |m: &mut ConfigUpdate| { &mut m.rendezvous_servers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConfigUpdate>(
            "ConfigUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConfigUpdate {
    const NAME: &'static str = "ConfigUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.serial = is.read_int32()?;
                },
                18 => {
                    self.rendezvous_servers.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.serial != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.serial);
        }
        for value in &self.rendezvous_servers {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.serial != 0 {
            os.write_int32(1, self.serial)?;
        }
        for v in &self.rendezvous_servers {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConfigUpdate {
        ConfigUpdate::new()
    }

    fn clear(&mut self) {
        self.serial = 0;
        self.rendezvous_servers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConfigUpdate {
        static instance: ConfigUpdate = ConfigUpdate {
            serial: 0,
            rendezvous_servers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConfigUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConfigUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConfigUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfigUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.RequestRelay)
pub struct RequestRelay {
    // message fields
    // @@protoc_insertion_point(field:hbb.RequestRelay.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.RequestRelay.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.RequestRelay.socket_addr)
    pub socket_addr: ::bytes::Bytes,
    // @@protoc_insertion_point(field:hbb.RequestRelay.relay_server)
    pub relay_server: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.RequestRelay.secure)
    pub secure: bool,
    // @@protoc_insertion_point(field:hbb.RequestRelay.licence_key)
    pub licence_key: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.RequestRelay.conn_type)
    pub conn_type: ::protobuf::EnumOrUnknown<ConnType>,
    // @@protoc_insertion_point(field:hbb.RequestRelay.token)
    pub token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.RequestRelay.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RequestRelay {
    fn default() -> &'a RequestRelay {
        <RequestRelay as ::protobuf::Message>::default_instance()
    }
}

impl RequestRelay {
    pub fn new() -> RequestRelay {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &RequestRelay| { &m.id },
            |m: &mut RequestRelay| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &RequestRelay| { &m.uuid },
            |m: &mut RequestRelay| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &RequestRelay| { &m.socket_addr },
            |m: &mut RequestRelay| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &RequestRelay| { &m.relay_server },
            |m: &mut RequestRelay| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "secure",
            |m: &RequestRelay| { &m.secure },
            |m: &mut RequestRelay| { &mut m.secure },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "licence_key",
            |m: &RequestRelay| { &m.licence_key },
            |m: &mut RequestRelay| { &mut m.licence_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "conn_type",
            |m: &RequestRelay| { &m.conn_type },
            |m: &mut RequestRelay| { &mut m.conn_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &RequestRelay| { &m.token },
            |m: &mut RequestRelay| { &mut m.token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequestRelay>(
            "RequestRelay",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RequestRelay {
    const NAME: &'static str = "RequestRelay";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.uuid = is.read_string()?;
                },
                26 => {
                    self.socket_addr = is.read_tokio_bytes()?;
                },
                34 => {
                    self.relay_server = is.read_string()?;
                },
                40 => {
                    self.secure = is.read_bool()?;
                },
                50 => {
                    self.licence_key = is.read_string()?;
                },
                56 => {
                    self.conn_type = is.read_enum_or_unknown()?;
                },
                66 => {
                    self.token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.uuid);
        }
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.socket_addr);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.relay_server);
        }
        if self.secure != false {
            my_size += 1 + 1;
        }
        if !self.licence_key.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.licence_key);
        }
        if self.conn_type != ::protobuf::EnumOrUnknown::new(ConnType::DEFAULT_CONN) {
            my_size += ::protobuf::rt::int32_size(7, self.conn_type.value());
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.uuid.is_empty() {
            os.write_string(2, &self.uuid)?;
        }
        if !self.socket_addr.is_empty() {
            os.write_bytes(3, &self.socket_addr)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(4, &self.relay_server)?;
        }
        if self.secure != false {
            os.write_bool(5, self.secure)?;
        }
        if !self.licence_key.is_empty() {
            os.write_string(6, &self.licence_key)?;
        }
        if self.conn_type != ::protobuf::EnumOrUnknown::new(ConnType::DEFAULT_CONN) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.conn_type))?;
        }
        if !self.token.is_empty() {
            os.write_string(8, &self.token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RequestRelay {
        RequestRelay::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.uuid.clear();
        self.socket_addr.clear();
        self.relay_server.clear();
        self.secure = false;
        self.licence_key.clear();
        self.conn_type = ::protobuf::EnumOrUnknown::new(ConnType::DEFAULT_CONN);
        self.token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RequestRelay {
        static instance: RequestRelay = RequestRelay {
            id: ::std::string::String::new(),
            uuid: ::std::string::String::new(),
            socket_addr: ::bytes::Bytes::new(),
            relay_server: ::std::string::String::new(),
            secure: false,
            licence_key: ::std::string::String::new(),
            conn_type: ::protobuf::EnumOrUnknown::from_i32(0),
            token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RequestRelay {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RequestRelay").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RequestRelay {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestRelay {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.RelayResponse)
pub struct RelayResponse {
    // message fields
    // @@protoc_insertion_point(field:hbb.RelayResponse.socket_addr)
    pub socket_addr: ::bytes::Bytes,
    // @@protoc_insertion_point(field:hbb.RelayResponse.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.RelayResponse.relay_server)
    pub relay_server: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.RelayResponse.refuse_reason)
    pub refuse_reason: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.RelayResponse.version)
    pub version: ::std::string::String,
    // message oneof groups
    pub union: ::std::option::Option<relay_response::Union>,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.RelayResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RelayResponse {
    fn default() -> &'a RelayResponse {
        <RelayResponse as ::protobuf::Message>::default_instance()
    }
}

impl RelayResponse {
    pub fn new() -> RelayResponse {
        ::std::default::Default::default()
    }

    // string id = 4;

    pub fn id(&self) -> &str {
        match self.union {
            ::std::option::Option::Some(relay_response::Union::Id(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_id(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(relay_response::Union::Id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.union = ::std::option::Option::Some(relay_response::Union::Id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(relay_response::Union::Id(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(relay_response::Union::Id(::std::string::String::new()));
        }
        match self.union {
            ::std::option::Option::Some(relay_response::Union::Id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        if self.has_id() {
            match self.union.take() {
                ::std::option::Option::Some(relay_response::Union::Id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes pk = 5;

    pub fn pk(&self) -> &[u8] {
        match self.union {
            ::std::option::Option::Some(relay_response::Union::Pk(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_pk(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_pk(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(relay_response::Union::Pk(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pk(&mut self, v: ::bytes::Bytes) {
        self.union = ::std::option::Option::Some(relay_response::Union::Pk(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pk(&mut self) -> &mut ::bytes::Bytes {
        if let ::std::option::Option::Some(relay_response::Union::Pk(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(relay_response::Union::Pk(::bytes::Bytes::new()));
        }
        match self.union {
            ::std::option::Option::Some(relay_response::Union::Pk(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pk(&mut self) -> ::bytes::Bytes {
        if self.has_pk() {
            match self.union.take() {
                ::std::option::Option::Some(relay_response::Union::Pk(v)) => v,
                _ => panic!(),
            }
        } else {
            ::bytes::Bytes::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &RelayResponse| { &m.socket_addr },
            |m: &mut RelayResponse| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &RelayResponse| { &m.uuid },
            |m: &mut RelayResponse| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &RelayResponse| { &m.relay_server },
            |m: &mut RelayResponse| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "id",
            RelayResponse::has_id,
            RelayResponse::id,
            RelayResponse::set_id,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "pk",
            RelayResponse::has_pk,
            RelayResponse::pk,
            RelayResponse::set_pk,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "refuse_reason",
            |m: &RelayResponse| { &m.refuse_reason },
            |m: &mut RelayResponse| { &mut m.refuse_reason },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &RelayResponse| { &m.version },
            |m: &mut RelayResponse| { &mut m.version },
        ));
        oneofs.push(relay_response::Union::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RelayResponse>(
            "RelayResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RelayResponse {
    const NAME: &'static str = "RelayResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.socket_addr = is.read_tokio_bytes()?;
                },
                18 => {
                    self.uuid = is.read_string()?;
                },
                26 => {
                    self.relay_server = is.read_string()?;
                },
                34 => {
                    self.union = ::std::option::Option::Some(relay_response::Union::Id(is.read_string()?));
                },
                42 => {
                    self.union = ::std::option::Option::Some(relay_response::Union::Pk(is.read_tokio_bytes()?));
                },
                50 => {
                    self.refuse_reason = is.read_string()?;
                },
                58 => {
                    self.version = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.uuid);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.relay_server);
        }
        if !self.refuse_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.refuse_reason);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.version);
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &relay_response::Union::Id(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &relay_response::Union::Pk(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(5, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.uuid.is_empty() {
            os.write_string(2, &self.uuid)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(3, &self.relay_server)?;
        }
        if !self.refuse_reason.is_empty() {
            os.write_string(6, &self.refuse_reason)?;
        }
        if !self.version.is_empty() {
            os.write_string(7, &self.version)?;
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &relay_response::Union::Id(ref v) => {
                    os.write_string(4, v)?;
                },
                &relay_response::Union::Pk(ref v) => {
                    os.write_bytes(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RelayResponse {
        RelayResponse::new()
    }

    fn clear(&mut self) {
        self.socket_addr.clear();
        self.uuid.clear();
        self.relay_server.clear();
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.refuse_reason.clear();
        self.version.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RelayResponse {
        static instance: RelayResponse = RelayResponse {
            socket_addr: ::bytes::Bytes::new(),
            uuid: ::std::string::String::new(),
            relay_server: ::std::string::String::new(),
            refuse_reason: ::std::string::String::new(),
            version: ::std::string::String::new(),
            union: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RelayResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RelayResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RelayResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RelayResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RelayResponse`
pub mod relay_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:hbb.RelayResponse.union)
    pub enum Union {
        // @@protoc_insertion_point(oneof_field:hbb.RelayResponse.id)
        Id(::std::string::String),
        // @@protoc_insertion_point(oneof_field:hbb.RelayResponse.pk)
        Pk(::bytes::Bytes),
    }

    impl ::protobuf::Oneof for Union {
    }

    impl ::protobuf::OneofFull for Union {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RelayResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("union").unwrap()).clone()
        }
    }

    impl Union {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Union>("union")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.SoftwareUpdate)
pub struct SoftwareUpdate {
    // message fields
    // @@protoc_insertion_point(field:hbb.SoftwareUpdate.url)
    pub url: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.SoftwareUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SoftwareUpdate {
    fn default() -> &'a SoftwareUpdate {
        <SoftwareUpdate as ::protobuf::Message>::default_instance()
    }
}

impl SoftwareUpdate {
    pub fn new() -> SoftwareUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &SoftwareUpdate| { &m.url },
            |m: &mut SoftwareUpdate| { &mut m.url },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SoftwareUpdate>(
            "SoftwareUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SoftwareUpdate {
    const NAME: &'static str = "SoftwareUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.url = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SoftwareUpdate {
        SoftwareUpdate::new()
    }

    fn clear(&mut self) {
        self.url.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SoftwareUpdate {
        static instance: SoftwareUpdate = SoftwareUpdate {
            url: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SoftwareUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SoftwareUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SoftwareUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SoftwareUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.FetchLocalAddr)
pub struct FetchLocalAddr {
    // message fields
    // @@protoc_insertion_point(field:hbb.FetchLocalAddr.socket_addr)
    pub socket_addr: ::bytes::Bytes,
    // @@protoc_insertion_point(field:hbb.FetchLocalAddr.relay_server)
    pub relay_server: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.FetchLocalAddr.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FetchLocalAddr {
    fn default() -> &'a FetchLocalAddr {
        <FetchLocalAddr as ::protobuf::Message>::default_instance()
    }
}

impl FetchLocalAddr {
    pub fn new() -> FetchLocalAddr {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &FetchLocalAddr| { &m.socket_addr },
            |m: &mut FetchLocalAddr| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &FetchLocalAddr| { &m.relay_server },
            |m: &mut FetchLocalAddr| { &mut m.relay_server },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FetchLocalAddr>(
            "FetchLocalAddr",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FetchLocalAddr {
    const NAME: &'static str = "FetchLocalAddr";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.socket_addr = is.read_tokio_bytes()?;
                },
                18 => {
                    self.relay_server = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.relay_server);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(2, &self.relay_server)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FetchLocalAddr {
        FetchLocalAddr::new()
    }

    fn clear(&mut self) {
        self.socket_addr.clear();
        self.relay_server.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FetchLocalAddr {
        static instance: FetchLocalAddr = FetchLocalAddr {
            socket_addr: ::bytes::Bytes::new(),
            relay_server: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FetchLocalAddr {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FetchLocalAddr").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FetchLocalAddr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FetchLocalAddr {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.LocalAddr)
pub struct LocalAddr {
    // message fields
    // @@protoc_insertion_point(field:hbb.LocalAddr.socket_addr)
    pub socket_addr: ::bytes::Bytes,
    // @@protoc_insertion_point(field:hbb.LocalAddr.local_addr)
    pub local_addr: ::bytes::Bytes,
    // @@protoc_insertion_point(field:hbb.LocalAddr.relay_server)
    pub relay_server: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.LocalAddr.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.LocalAddr.version)
    pub version: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.LocalAddr.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LocalAddr {
    fn default() -> &'a LocalAddr {
        <LocalAddr as ::protobuf::Message>::default_instance()
    }
}

impl LocalAddr {
    pub fn new() -> LocalAddr {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socket_addr",
            |m: &LocalAddr| { &m.socket_addr },
            |m: &mut LocalAddr| { &mut m.socket_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "local_addr",
            |m: &LocalAddr| { &m.local_addr },
            |m: &mut LocalAddr| { &mut m.local_addr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "relay_server",
            |m: &LocalAddr| { &m.relay_server },
            |m: &mut LocalAddr| { &mut m.relay_server },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &LocalAddr| { &m.id },
            |m: &mut LocalAddr| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &LocalAddr| { &m.version },
            |m: &mut LocalAddr| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LocalAddr>(
            "LocalAddr",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LocalAddr {
    const NAME: &'static str = "LocalAddr";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.socket_addr = is.read_tokio_bytes()?;
                },
                18 => {
                    self.local_addr = is.read_tokio_bytes()?;
                },
                26 => {
                    self.relay_server = is.read_string()?;
                },
                34 => {
                    self.id = is.read_string()?;
                },
                42 => {
                    self.version = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.socket_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.socket_addr);
        }
        if !self.local_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.local_addr);
        }
        if !self.relay_server.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.relay_server);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.id);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.socket_addr.is_empty() {
            os.write_bytes(1, &self.socket_addr)?;
        }
        if !self.local_addr.is_empty() {
            os.write_bytes(2, &self.local_addr)?;
        }
        if !self.relay_server.is_empty() {
            os.write_string(3, &self.relay_server)?;
        }
        if !self.id.is_empty() {
            os.write_string(4, &self.id)?;
        }
        if !self.version.is_empty() {
            os.write_string(5, &self.version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LocalAddr {
        LocalAddr::new()
    }

    fn clear(&mut self) {
        self.socket_addr.clear();
        self.local_addr.clear();
        self.relay_server.clear();
        self.id.clear();
        self.version.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LocalAddr {
        static instance: LocalAddr = LocalAddr {
            socket_addr: ::bytes::Bytes::new(),
            local_addr: ::bytes::Bytes::new(),
            relay_server: ::std::string::String::new(),
            id: ::std::string::String::new(),
            version: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LocalAddr {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LocalAddr").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LocalAddr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalAddr {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.PeerDiscovery)
pub struct PeerDiscovery {
    // message fields
    // @@protoc_insertion_point(field:hbb.PeerDiscovery.cmd)
    pub cmd: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PeerDiscovery.mac)
    pub mac: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PeerDiscovery.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PeerDiscovery.username)
    pub username: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PeerDiscovery.hostname)
    pub hostname: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PeerDiscovery.platform)
    pub platform: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.PeerDiscovery.misc)
    pub misc: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.PeerDiscovery.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PeerDiscovery {
    fn default() -> &'a PeerDiscovery {
        <PeerDiscovery as ::protobuf::Message>::default_instance()
    }
}

impl PeerDiscovery {
    pub fn new() -> PeerDiscovery {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cmd",
            |m: &PeerDiscovery| { &m.cmd },
            |m: &mut PeerDiscovery| { &mut m.cmd },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mac",
            |m: &PeerDiscovery| { &m.mac },
            |m: &mut PeerDiscovery| { &mut m.mac },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PeerDiscovery| { &m.id },
            |m: &mut PeerDiscovery| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "username",
            |m: &PeerDiscovery| { &m.username },
            |m: &mut PeerDiscovery| { &mut m.username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hostname",
            |m: &PeerDiscovery| { &m.hostname },
            |m: &mut PeerDiscovery| { &mut m.hostname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform",
            |m: &PeerDiscovery| { &m.platform },
            |m: &mut PeerDiscovery| { &mut m.platform },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "misc",
            |m: &PeerDiscovery| { &m.misc },
            |m: &mut PeerDiscovery| { &mut m.misc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PeerDiscovery>(
            "PeerDiscovery",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PeerDiscovery {
    const NAME: &'static str = "PeerDiscovery";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.cmd = is.read_string()?;
                },
                18 => {
                    self.mac = is.read_string()?;
                },
                26 => {
                    self.id = is.read_string()?;
                },
                34 => {
                    self.username = is.read_string()?;
                },
                42 => {
                    self.hostname = is.read_string()?;
                },
                50 => {
                    self.platform = is.read_string()?;
                },
                58 => {
                    self.misc = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.cmd.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cmd);
        }
        if !self.mac.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.mac);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.id);
        }
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.username);
        }
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.hostname);
        }
        if !self.platform.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.platform);
        }
        if !self.misc.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.misc);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.cmd.is_empty() {
            os.write_string(1, &self.cmd)?;
        }
        if !self.mac.is_empty() {
            os.write_string(2, &self.mac)?;
        }
        if !self.id.is_empty() {
            os.write_string(3, &self.id)?;
        }
        if !self.username.is_empty() {
            os.write_string(4, &self.username)?;
        }
        if !self.hostname.is_empty() {
            os.write_string(5, &self.hostname)?;
        }
        if !self.platform.is_empty() {
            os.write_string(6, &self.platform)?;
        }
        if !self.misc.is_empty() {
            os.write_string(7, &self.misc)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PeerDiscovery {
        PeerDiscovery::new()
    }

    fn clear(&mut self) {
        self.cmd.clear();
        self.mac.clear();
        self.id.clear();
        self.username.clear();
        self.hostname.clear();
        self.platform.clear();
        self.misc.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PeerDiscovery {
        static instance: PeerDiscovery = PeerDiscovery {
            cmd: ::std::string::String::new(),
            mac: ::std::string::String::new(),
            id: ::std::string::String::new(),
            username: ::std::string::String::new(),
            hostname: ::std::string::String::new(),
            platform: ::std::string::String::new(),
            misc: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PeerDiscovery {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PeerDiscovery").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PeerDiscovery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerDiscovery {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.OnlineRequest)
pub struct OnlineRequest {
    // message fields
    // @@protoc_insertion_point(field:hbb.OnlineRequest.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:hbb.OnlineRequest.peers)
    pub peers: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.OnlineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OnlineRequest {
    fn default() -> &'a OnlineRequest {
        <OnlineRequest as ::protobuf::Message>::default_instance()
    }
}

impl OnlineRequest {
    pub fn new() -> OnlineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &OnlineRequest| { &m.id },
            |m: &mut OnlineRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "peers",
            |m: &OnlineRequest| { &m.peers },
            |m: &mut OnlineRequest| { &mut m.peers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OnlineRequest>(
            "OnlineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OnlineRequest {
    const NAME: &'static str = "OnlineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.peers.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        for value in &self.peers {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        for v in &self.peers {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OnlineRequest {
        OnlineRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.peers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OnlineRequest {
        static instance: OnlineRequest = OnlineRequest {
            id: ::std::string::String::new(),
            peers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OnlineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OnlineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OnlineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OnlineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.OnlineResponse)
pub struct OnlineResponse {
    // message fields
    // @@protoc_insertion_point(field:hbb.OnlineResponse.states)
    pub states: ::bytes::Bytes,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.OnlineResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OnlineResponse {
    fn default() -> &'a OnlineResponse {
        <OnlineResponse as ::protobuf::Message>::default_instance()
    }
}

impl OnlineResponse {
    pub fn new() -> OnlineResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "states",
            |m: &OnlineResponse| { &m.states },
            |m: &mut OnlineResponse| { &mut m.states },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OnlineResponse>(
            "OnlineResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OnlineResponse {
    const NAME: &'static str = "OnlineResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.states = is.read_tokio_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.states.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.states);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.states.is_empty() {
            os.write_bytes(1, &self.states)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OnlineResponse {
        OnlineResponse::new()
    }

    fn clear(&mut self) {
        self.states.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OnlineResponse {
        static instance: OnlineResponse = OnlineResponse {
            states: ::bytes::Bytes::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OnlineResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OnlineResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OnlineResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OnlineResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:hbb.RendezvousMessage)
pub struct RendezvousMessage {
    // message oneof groups
    pub union: ::std::option::Option<rendezvous_message::Union>,
    // special fields
    // @@protoc_insertion_point(special_field:hbb.RendezvousMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RendezvousMessage {
    fn default() -> &'a RendezvousMessage {
        <RendezvousMessage as ::protobuf::Message>::default_instance()
    }
}

impl RendezvousMessage {
    pub fn new() -> RendezvousMessage {
        ::std::default::Default::default()
    }

    // .hbb.RegisterPeer register_peer = 6;

    pub fn register_peer(&self) -> &RegisterPeer {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(ref v)) => v,
            _ => <RegisterPeer as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_peer(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_peer(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_peer(&mut self, v: RegisterPeer) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_peer(&mut self) -> &mut RegisterPeer {
        if let ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(RegisterPeer::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_peer(&mut self) -> RegisterPeer {
        if self.has_register_peer() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPeer::new()
        }
    }

    // .hbb.RegisterPeerResponse register_peer_response = 7;

    pub fn register_peer_response(&self) -> &RegisterPeerResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(ref v)) => v,
            _ => <RegisterPeerResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_peer_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_peer_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_peer_response(&mut self, v: RegisterPeerResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_peer_response(&mut self) -> &mut RegisterPeerResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(RegisterPeerResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_peer_response(&mut self) -> RegisterPeerResponse {
        if self.has_register_peer_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPeerResponse::new()
        }
    }

    // .hbb.PunchHoleRequest punch_hole_request = 8;

    pub fn punch_hole_request(&self) -> &PunchHoleRequest {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHoleRequest(ref v)) => v,
            _ => <PunchHoleRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_punch_hole_request(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_punch_hole_request(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHoleRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_punch_hole_request(&mut self, v: PunchHoleRequest) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHoleRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_punch_hole_request(&mut self) -> &mut PunchHoleRequest {
        if let ::std::option::Option::Some(rendezvous_message::Union::PunchHoleRequest(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHoleRequest(PunchHoleRequest::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHoleRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_punch_hole_request(&mut self) -> PunchHoleRequest {
        if self.has_punch_hole_request() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::PunchHoleRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            PunchHoleRequest::new()
        }
    }

    // .hbb.PunchHole punch_hole = 9;

    pub fn punch_hole(&self) -> &PunchHole {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHole(ref v)) => v,
            _ => <PunchHole as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_punch_hole(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_punch_hole(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHole(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_punch_hole(&mut self, v: PunchHole) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHole(v))
    }

    // Mutable pointer to the field.
    pub fn mut_punch_hole(&mut self) -> &mut PunchHole {
        if let ::std::option::Option::Some(rendezvous_message::Union::PunchHole(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHole(PunchHole::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHole(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_punch_hole(&mut self) -> PunchHole {
        if self.has_punch_hole() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::PunchHole(v)) => v,
                _ => panic!(),
            }
        } else {
            PunchHole::new()
        }
    }

    // .hbb.PunchHoleSent punch_hole_sent = 10;

    pub fn punch_hole_sent(&self) -> &PunchHoleSent {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHoleSent(ref v)) => v,
            _ => <PunchHoleSent as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_punch_hole_sent(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_punch_hole_sent(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHoleSent(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_punch_hole_sent(&mut self, v: PunchHoleSent) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHoleSent(v))
    }

    // Mutable pointer to the field.
    pub fn mut_punch_hole_sent(&mut self) -> &mut PunchHoleSent {
        if let ::std::option::Option::Some(rendezvous_message::Union::PunchHoleSent(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHoleSent(PunchHoleSent::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHoleSent(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_punch_hole_sent(&mut self) -> PunchHoleSent {
        if self.has_punch_hole_sent() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::PunchHoleSent(v)) => v,
                _ => panic!(),
            }
        } else {
            PunchHoleSent::new()
        }
    }

    // .hbb.PunchHoleResponse punch_hole_response = 11;

    pub fn punch_hole_response(&self) -> &PunchHoleResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHoleResponse(ref v)) => v,
            _ => <PunchHoleResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_punch_hole_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_punch_hole_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHoleResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_punch_hole_response(&mut self, v: PunchHoleResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHoleResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_punch_hole_response(&mut self) -> &mut PunchHoleResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::PunchHoleResponse(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHoleResponse(PunchHoleResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PunchHoleResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_punch_hole_response(&mut self) -> PunchHoleResponse {
        if self.has_punch_hole_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::PunchHoleResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            PunchHoleResponse::new()
        }
    }

    // .hbb.FetchLocalAddr fetch_local_addr = 12;

    pub fn fetch_local_addr(&self) -> &FetchLocalAddr {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::FetchLocalAddr(ref v)) => v,
            _ => <FetchLocalAddr as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_fetch_local_addr(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_fetch_local_addr(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::FetchLocalAddr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fetch_local_addr(&mut self, v: FetchLocalAddr) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::FetchLocalAddr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fetch_local_addr(&mut self) -> &mut FetchLocalAddr {
        if let ::std::option::Option::Some(rendezvous_message::Union::FetchLocalAddr(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::FetchLocalAddr(FetchLocalAddr::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::FetchLocalAddr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fetch_local_addr(&mut self) -> FetchLocalAddr {
        if self.has_fetch_local_addr() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::FetchLocalAddr(v)) => v,
                _ => panic!(),
            }
        } else {
            FetchLocalAddr::new()
        }
    }

    // .hbb.LocalAddr local_addr = 13;

    pub fn local_addr(&self) -> &LocalAddr {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::LocalAddr(ref v)) => v,
            _ => <LocalAddr as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_local_addr(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_local_addr(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::LocalAddr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_local_addr(&mut self, v: LocalAddr) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::LocalAddr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_local_addr(&mut self) -> &mut LocalAddr {
        if let ::std::option::Option::Some(rendezvous_message::Union::LocalAddr(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::LocalAddr(LocalAddr::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::LocalAddr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_local_addr(&mut self) -> LocalAddr {
        if self.has_local_addr() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::LocalAddr(v)) => v,
                _ => panic!(),
            }
        } else {
            LocalAddr::new()
        }
    }

    // .hbb.ConfigUpdate configure_update = 14;

    pub fn configure_update(&self) -> &ConfigUpdate {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(ref v)) => v,
            _ => <ConfigUpdate as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_configure_update(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_configure_update(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_configure_update(&mut self, v: ConfigUpdate) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_configure_update(&mut self) -> &mut ConfigUpdate {
        if let ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(ConfigUpdate::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_configure_update(&mut self) -> ConfigUpdate {
        if self.has_configure_update() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(v)) => v,
                _ => panic!(),
            }
        } else {
            ConfigUpdate::new()
        }
    }

    // .hbb.RegisterPk register_pk = 15;

    pub fn register_pk(&self) -> &RegisterPk {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(ref v)) => v,
            _ => <RegisterPk as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_pk(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_pk(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_pk(&mut self, v: RegisterPk) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_pk(&mut self) -> &mut RegisterPk {
        if let ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(RegisterPk::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_pk(&mut self) -> RegisterPk {
        if self.has_register_pk() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPk::new()
        }
    }

    // .hbb.RegisterPkResponse register_pk_response = 16;

    pub fn register_pk_response(&self) -> &RegisterPkResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(ref v)) => v,
            _ => <RegisterPkResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_pk_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_register_pk_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_pk_response(&mut self, v: RegisterPkResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_pk_response(&mut self) -> &mut RegisterPkResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(RegisterPkResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_pk_response(&mut self) -> RegisterPkResponse {
        if self.has_register_pk_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterPkResponse::new()
        }
    }

    // .hbb.SoftwareUpdate software_update = 17;

    pub fn software_update(&self) -> &SoftwareUpdate {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::SoftwareUpdate(ref v)) => v,
            _ => <SoftwareUpdate as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_software_update(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_software_update(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::SoftwareUpdate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_software_update(&mut self, v: SoftwareUpdate) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::SoftwareUpdate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_software_update(&mut self) -> &mut SoftwareUpdate {
        if let ::std::option::Option::Some(rendezvous_message::Union::SoftwareUpdate(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::SoftwareUpdate(SoftwareUpdate::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::SoftwareUpdate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_software_update(&mut self) -> SoftwareUpdate {
        if self.has_software_update() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::SoftwareUpdate(v)) => v,
                _ => panic!(),
            }
        } else {
            SoftwareUpdate::new()
        }
    }

    // .hbb.RequestRelay request_relay = 18;

    pub fn request_relay(&self) -> &RequestRelay {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RequestRelay(ref v)) => v,
            _ => <RequestRelay as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_request_relay(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_request_relay(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RequestRelay(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_request_relay(&mut self, v: RequestRelay) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::RequestRelay(v))
    }

    // Mutable pointer to the field.
    pub fn mut_request_relay(&mut self) -> &mut RequestRelay {
        if let ::std::option::Option::Some(rendezvous_message::Union::RequestRelay(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::RequestRelay(RequestRelay::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RequestRelay(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_request_relay(&mut self) -> RequestRelay {
        if self.has_request_relay() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::RequestRelay(v)) => v,
                _ => panic!(),
            }
        } else {
            RequestRelay::new()
        }
    }

    // .hbb.RelayResponse relay_response = 19;

    pub fn relay_response(&self) -> &RelayResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RelayResponse(ref v)) => v,
            _ => <RelayResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_relay_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_relay_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RelayResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_relay_response(&mut self, v: RelayResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::RelayResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_relay_response(&mut self) -> &mut RelayResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::RelayResponse(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::RelayResponse(RelayResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::RelayResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_relay_response(&mut self) -> RelayResponse {
        if self.has_relay_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::RelayResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            RelayResponse::new()
        }
    }

    // .hbb.TestNatRequest test_nat_request = 20;

    pub fn test_nat_request(&self) -> &TestNatRequest {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(ref v)) => v,
            _ => <TestNatRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_test_nat_request(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_test_nat_request(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_test_nat_request(&mut self, v: TestNatRequest) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_test_nat_request(&mut self) -> &mut TestNatRequest {
        if let ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(TestNatRequest::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_test_nat_request(&mut self) -> TestNatRequest {
        if self.has_test_nat_request() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            TestNatRequest::new()
        }
    }

    // .hbb.TestNatResponse test_nat_response = 21;

    pub fn test_nat_response(&self) -> &TestNatResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(ref v)) => v,
            _ => <TestNatResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_test_nat_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_test_nat_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_test_nat_response(&mut self, v: TestNatResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_test_nat_response(&mut self) -> &mut TestNatResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(TestNatResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_test_nat_response(&mut self) -> TestNatResponse {
        if self.has_test_nat_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            TestNatResponse::new()
        }
    }

    // .hbb.PeerDiscovery peer_discovery = 22;

    pub fn peer_discovery(&self) -> &PeerDiscovery {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PeerDiscovery(ref v)) => v,
            _ => <PeerDiscovery as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_peer_discovery(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_peer_discovery(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PeerDiscovery(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_peer_discovery(&mut self, v: PeerDiscovery) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::PeerDiscovery(v))
    }

    // Mutable pointer to the field.
    pub fn mut_peer_discovery(&mut self) -> &mut PeerDiscovery {
        if let ::std::option::Option::Some(rendezvous_message::Union::PeerDiscovery(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::PeerDiscovery(PeerDiscovery::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::PeerDiscovery(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_peer_discovery(&mut self) -> PeerDiscovery {
        if self.has_peer_discovery() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::PeerDiscovery(v)) => v,
                _ => panic!(),
            }
        } else {
            PeerDiscovery::new()
        }
    }

    // .hbb.OnlineRequest online_request = 23;

    pub fn online_request(&self) -> &OnlineRequest {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::OnlineRequest(ref v)) => v,
            _ => <OnlineRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_online_request(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_online_request(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::OnlineRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_online_request(&mut self, v: OnlineRequest) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::OnlineRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_online_request(&mut self) -> &mut OnlineRequest {
        if let ::std::option::Option::Some(rendezvous_message::Union::OnlineRequest(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::OnlineRequest(OnlineRequest::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::OnlineRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_online_request(&mut self) -> OnlineRequest {
        if self.has_online_request() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::OnlineRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            OnlineRequest::new()
        }
    }

    // .hbb.OnlineResponse online_response = 24;

    pub fn online_response(&self) -> &OnlineResponse {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::OnlineResponse(ref v)) => v,
            _ => <OnlineResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_online_response(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_online_response(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::OnlineResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_online_response(&mut self, v: OnlineResponse) {
        self.union = ::std::option::Option::Some(rendezvous_message::Union::OnlineResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_online_response(&mut self) -> &mut OnlineResponse {
        if let ::std::option::Option::Some(rendezvous_message::Union::OnlineResponse(_)) = self.union {
        } else {
            self.union = ::std::option::Option::Some(rendezvous_message::Union::OnlineResponse(OnlineResponse::new()));
        }
        match self.union {
            ::std::option::Option::Some(rendezvous_message::Union::OnlineResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_online_response(&mut self) -> OnlineResponse {
        if self.has_online_response() {
            match self.union.take() {
                ::std::option::Option::Some(rendezvous_message::Union::OnlineResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            OnlineResponse::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(19);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPeer>(
            "register_peer",
            RendezvousMessage::has_register_peer,
            RendezvousMessage::register_peer,
            RendezvousMessage::mut_register_peer,
            RendezvousMessage::set_register_peer,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPeerResponse>(
            "register_peer_response",
            RendezvousMessage::has_register_peer_response,
            RendezvousMessage::register_peer_response,
            RendezvousMessage::mut_register_peer_response,
            RendezvousMessage::set_register_peer_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PunchHoleRequest>(
            "punch_hole_request",
            RendezvousMessage::has_punch_hole_request,
            RendezvousMessage::punch_hole_request,
            RendezvousMessage::mut_punch_hole_request,
            RendezvousMessage::set_punch_hole_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PunchHole>(
            "punch_hole",
            RendezvousMessage::has_punch_hole,
            RendezvousMessage::punch_hole,
            RendezvousMessage::mut_punch_hole,
            RendezvousMessage::set_punch_hole,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PunchHoleSent>(
            "punch_hole_sent",
            RendezvousMessage::has_punch_hole_sent,
            RendezvousMessage::punch_hole_sent,
            RendezvousMessage::mut_punch_hole_sent,
            RendezvousMessage::set_punch_hole_sent,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PunchHoleResponse>(
            "punch_hole_response",
            RendezvousMessage::has_punch_hole_response,
            RendezvousMessage::punch_hole_response,
            RendezvousMessage::mut_punch_hole_response,
            RendezvousMessage::set_punch_hole_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, FetchLocalAddr>(
            "fetch_local_addr",
            RendezvousMessage::has_fetch_local_addr,
            RendezvousMessage::fetch_local_addr,
            RendezvousMessage::mut_fetch_local_addr,
            RendezvousMessage::set_fetch_local_addr,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, LocalAddr>(
            "local_addr",
            RendezvousMessage::has_local_addr,
            RendezvousMessage::local_addr,
            RendezvousMessage::mut_local_addr,
            RendezvousMessage::set_local_addr,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ConfigUpdate>(
            "configure_update",
            RendezvousMessage::has_configure_update,
            RendezvousMessage::configure_update,
            RendezvousMessage::mut_configure_update,
            RendezvousMessage::set_configure_update,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPk>(
            "register_pk",
            RendezvousMessage::has_register_pk,
            RendezvousMessage::register_pk,
            RendezvousMessage::mut_register_pk,
            RendezvousMessage::set_register_pk,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterPkResponse>(
            "register_pk_response",
            RendezvousMessage::has_register_pk_response,
            RendezvousMessage::register_pk_response,
            RendezvousMessage::mut_register_pk_response,
            RendezvousMessage::set_register_pk_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SoftwareUpdate>(
            "software_update",
            RendezvousMessage::has_software_update,
            RendezvousMessage::software_update,
            RendezvousMessage::mut_software_update,
            RendezvousMessage::set_software_update,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RequestRelay>(
            "request_relay",
            RendezvousMessage::has_request_relay,
            RendezvousMessage::request_relay,
            RendezvousMessage::mut_request_relay,
            RendezvousMessage::set_request_relay,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RelayResponse>(
            "relay_response",
            RendezvousMessage::has_relay_response,
            RendezvousMessage::relay_response,
            RendezvousMessage::mut_relay_response,
            RendezvousMessage::set_relay_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TestNatRequest>(
            "test_nat_request",
            RendezvousMessage::has_test_nat_request,
            RendezvousMessage::test_nat_request,
            RendezvousMessage::mut_test_nat_request,
            RendezvousMessage::set_test_nat_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TestNatResponse>(
            "test_nat_response",
            RendezvousMessage::has_test_nat_response,
            RendezvousMessage::test_nat_response,
            RendezvousMessage::mut_test_nat_response,
            RendezvousMessage::set_test_nat_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PeerDiscovery>(
            "peer_discovery",
            RendezvousMessage::has_peer_discovery,
            RendezvousMessage::peer_discovery,
            RendezvousMessage::mut_peer_discovery,
            RendezvousMessage::set_peer_discovery,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, OnlineRequest>(
            "online_request",
            RendezvousMessage::has_online_request,
            RendezvousMessage::online_request,
            RendezvousMessage::mut_online_request,
            RendezvousMessage::set_online_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, OnlineResponse>(
            "online_response",
            RendezvousMessage::has_online_response,
            RendezvousMessage::online_response,
            RendezvousMessage::mut_online_response,
            RendezvousMessage::set_online_response,
        ));
        oneofs.push(rendezvous_message::Union::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RendezvousMessage>(
            "RendezvousMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RendezvousMessage {
    const NAME: &'static str = "RendezvousMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                50 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeer(is.read_message()?));
                },
                58 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPeerResponse(is.read_message()?));
                },
                66 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHoleRequest(is.read_message()?));
                },
                74 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHole(is.read_message()?));
                },
                82 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHoleSent(is.read_message()?));
                },
                90 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::PunchHoleResponse(is.read_message()?));
                },
                98 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::FetchLocalAddr(is.read_message()?));
                },
                106 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::LocalAddr(is.read_message()?));
                },
                114 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::ConfigureUpdate(is.read_message()?));
                },
                122 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPk(is.read_message()?));
                },
                130 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::RegisterPkResponse(is.read_message()?));
                },
                138 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::SoftwareUpdate(is.read_message()?));
                },
                146 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::RequestRelay(is.read_message()?));
                },
                154 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::RelayResponse(is.read_message()?));
                },
                162 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatRequest(is.read_message()?));
                },
                170 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::TestNatResponse(is.read_message()?));
                },
                178 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::PeerDiscovery(is.read_message()?));
                },
                186 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::OnlineRequest(is.read_message()?));
                },
                194 => {
                    self.union = ::std::option::Option::Some(rendezvous_message::Union::OnlineResponse(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &rendezvous_message::Union::RegisterPeer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::RegisterPeerResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::PunchHoleRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::PunchHole(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::PunchHoleSent(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::PunchHoleResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::FetchLocalAddr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::LocalAddr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::ConfigureUpdate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::RegisterPk(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::RegisterPkResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::SoftwareUpdate(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::RequestRelay(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::RelayResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::TestNatRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::TestNatResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::PeerDiscovery(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::OnlineRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &rendezvous_message::Union::OnlineResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &rendezvous_message::Union::RegisterPeer(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &rendezvous_message::Union::RegisterPeerResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &rendezvous_message::Union::PunchHoleRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &rendezvous_message::Union::PunchHole(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &rendezvous_message::Union::PunchHoleSent(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &rendezvous_message::Union::PunchHoleResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
                &rendezvous_message::Union::FetchLocalAddr(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
                },
                &rendezvous_message::Union::LocalAddr(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
                },
                &rendezvous_message::Union::ConfigureUpdate(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
                },
                &rendezvous_message::Union::RegisterPk(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
                },
                &rendezvous_message::Union::RegisterPkResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
                },
                &rendezvous_message::Union::SoftwareUpdate(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(17, v, os)?;
                },
                &rendezvous_message::Union::RequestRelay(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(18, v, os)?;
                },
                &rendezvous_message::Union::RelayResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(19, v, os)?;
                },
                &rendezvous_message::Union::TestNatRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
                },
                &rendezvous_message::Union::TestNatResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
                },
                &rendezvous_message::Union::PeerDiscovery(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
                },
                &rendezvous_message::Union::OnlineRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
                },
                &rendezvous_message::Union::OnlineResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(24, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RendezvousMessage {
        RendezvousMessage::new()
    }

    fn clear(&mut self) {
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RendezvousMessage {
        static instance: RendezvousMessage = RendezvousMessage {
            union: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RendezvousMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RendezvousMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RendezvousMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RendezvousMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `RendezvousMessage`
pub mod rendezvous_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:hbb.RendezvousMessage.union)
    pub enum Union {
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.register_peer)
        RegisterPeer(super::RegisterPeer),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.register_peer_response)
        RegisterPeerResponse(super::RegisterPeerResponse),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.punch_hole_request)
        PunchHoleRequest(super::PunchHoleRequest),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.punch_hole)
        PunchHole(super::PunchHole),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.punch_hole_sent)
        PunchHoleSent(super::PunchHoleSent),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.punch_hole_response)
        PunchHoleResponse(super::PunchHoleResponse),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.fetch_local_addr)
        FetchLocalAddr(super::FetchLocalAddr),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.local_addr)
        LocalAddr(super::LocalAddr),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.configure_update)
        ConfigureUpdate(super::ConfigUpdate),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.register_pk)
        RegisterPk(super::RegisterPk),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.register_pk_response)
        RegisterPkResponse(super::RegisterPkResponse),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.software_update)
        SoftwareUpdate(super::SoftwareUpdate),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.request_relay)
        RequestRelay(super::RequestRelay),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.relay_response)
        RelayResponse(super::RelayResponse),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.test_nat_request)
        TestNatRequest(super::TestNatRequest),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.test_nat_response)
        TestNatResponse(super::TestNatResponse),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.peer_discovery)
        PeerDiscovery(super::PeerDiscovery),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.online_request)
        OnlineRequest(super::OnlineRequest),
        // @@protoc_insertion_point(oneof_field:hbb.RendezvousMessage.online_response)
        OnlineResponse(super::OnlineResponse),
    }

    impl ::protobuf::Oneof for Union {
    }

    impl ::protobuf::OneofFull for Union {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::RendezvousMessage as ::protobuf::MessageFull>::descriptor().oneof_by_name("union").unwrap()).clone()
        }
    }

    impl Union {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Union>("union")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:hbb.ConnType)
pub enum ConnType {
    // @@protoc_insertion_point(enum_value:hbb.ConnType.DEFAULT_CONN)
    DEFAULT_CONN = 0,
    // @@protoc_insertion_point(enum_value:hbb.ConnType.FILE_TRANSFER)
    FILE_TRANSFER = 1,
    // @@protoc_insertion_point(enum_value:hbb.ConnType.PORT_FORWARD)
    PORT_FORWARD = 2,
    // @@protoc_insertion_point(enum_value:hbb.ConnType.RDP)
    RDP = 3,
}

impl ::protobuf::Enum for ConnType {
    const NAME: &'static str = "ConnType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConnType> {
        match value {
            0 => ::std::option::Option::Some(ConnType::DEFAULT_CONN),
            1 => ::std::option::Option::Some(ConnType::FILE_TRANSFER),
            2 => ::std::option::Option::Some(ConnType::PORT_FORWARD),
            3 => ::std::option::Option::Some(ConnType::RDP),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ConnType] = &[
        ConnType::DEFAULT_CONN,
        ConnType::FILE_TRANSFER,
        ConnType::PORT_FORWARD,
        ConnType::RDP,
    ];
}

impl ::protobuf::EnumFull for ConnType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ConnType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ConnType {
    fn default() -> Self {
        ConnType::DEFAULT_CONN
    }
}

impl ConnType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ConnType>("ConnType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:hbb.NatType)
pub enum NatType {
    // @@protoc_insertion_point(enum_value:hbb.NatType.UNKNOWN_NAT)
    UNKNOWN_NAT = 0,
    // @@protoc_insertion_point(enum_value:hbb.NatType.ASYMMETRIC)
    ASYMMETRIC = 1,
    // @@protoc_insertion_point(enum_value:hbb.NatType.SYMMETRIC)
    SYMMETRIC = 2,
}

impl ::protobuf::Enum for NatType {
    const NAME: &'static str = "NatType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NatType> {
        match value {
            0 => ::std::option::Option::Some(NatType::UNKNOWN_NAT),
            1 => ::std::option::Option::Some(NatType::ASYMMETRIC),
            2 => ::std::option::Option::Some(NatType::SYMMETRIC),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [NatType] = &[
        NatType::UNKNOWN_NAT,
        NatType::ASYMMETRIC,
        NatType::SYMMETRIC,
    ];
}

impl ::protobuf::EnumFull for NatType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("NatType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for NatType {
    fn default() -> Self {
        NatType::UNKNOWN_NAT
    }
}

impl NatType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<NatType>("NatType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10rendezvous.proto\x12\x03hbb\"6\n\x0cRegisterPeer\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\tR\x02id\x12\x16\n\x06serial\x18\x02\x20\x01(\x05R\x06\
    serial\"5\n\x14RegisterPeerResponse\x12\x1d\n\nrequest_pk\x18\x02\x20\
    \x01(\x08R\trequestPk\"\xae\x01\n\x10PunchHoleRequest\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\tR\x02id\x12'\n\x08nat_type\x18\x02\x20\x01(\x0e2\x0c.\
    hbb.NatTypeR\x07natType\x12\x1f\n\x0blicence_key\x18\x03\x20\x01(\tR\nli\
    cenceKey\x12*\n\tconn_type\x18\x04\x20\x01(\x0e2\r.hbb.ConnTypeR\x08conn\
    Type\x12\x14\n\x05token\x18\x05\x20\x01(\tR\x05token\"x\n\tPunchHole\x12\
    \x1f\n\x0bsocket_addr\x18\x01\x20\x01(\x0cR\nsocketAddr\x12!\n\x0crelay_\
    server\x18\x02\x20\x01(\tR\x0brelayServer\x12'\n\x08nat_type\x18\x03\x20\
    \x01(\x0e2\x0c.hbb.NatTypeR\x07natType\"(\n\x0eTestNatRequest\x12\x16\n\
    \x06serial\x18\x01\x20\x01(\x05R\x06serial\"H\n\x0fTestNatResponse\x12\
    \x12\n\x04port\x18\x01\x20\x01(\x05R\x04port\x12!\n\x02cu\x18\x02\x20\
    \x01(\x0b2\x11.hbb.ConfigUpdateR\x02cu\"\xa6\x01\n\rPunchHoleSent\x12\
    \x1f\n\x0bsocket_addr\x18\x01\x20\x01(\x0cR\nsocketAddr\x12\x0e\n\x02id\
    \x18\x02\x20\x01(\tR\x02id\x12!\n\x0crelay_server\x18\x03\x20\x01(\tR\
    \x0brelayServer\x12'\n\x08nat_type\x18\x04\x20\x01(\x0e2\x0c.hbb.NatType\
    R\x07natType\x12\x18\n\x07version\x18\x05\x20\x01(\tR\x07version\"W\n\nR\
    egisterPk\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04uuid\
    \x18\x02\x20\x01(\x0cR\x04uuid\x12\x0e\n\x02pk\x18\x03\x20\x01(\x0cR\x02\
    pk\x12\x15\n\x06old_id\x18\x04\x20\x01(\tR\x05oldId\"\xcc\x01\n\x12Regis\
    terPkResponse\x126\n\x06result\x18\x01\x20\x01(\x0e2\x1e.hbb.RegisterPkR\
    esponse.ResultR\x06result\"~\n\x06Result\x12\x06\n\x02OK\x10\0\x12\x11\n\
    \rUUID_MISMATCH\x10\x02\x12\r\n\tID_EXISTS\x10\x03\x12\x10\n\x0cTOO_FREQ\
    UENT\x10\x04\x12\x15\n\x11INVALID_ID_FORMAT\x10\x05\x12\x0f\n\x0bNOT_SUP\
    PORT\x10\x06\x12\x10\n\x0cSERVER_ERROR\x10\x07\"\xec\x02\n\x11PunchHoleR\
    esponse\x12\x1f\n\x0bsocket_addr\x18\x01\x20\x01(\x0cR\nsocketAddr\x12\
    \x0e\n\x02pk\x18\x02\x20\x01(\x0cR\x02pk\x128\n\x07failure\x18\x03\x20\
    \x01(\x0e2\x1e.hbb.PunchHoleResponse.FailureR\x07failure\x12!\n\x0crelay\
    _server\x18\x04\x20\x01(\tR\x0brelayServer\x12)\n\x08nat_type\x18\x05\
    \x20\x01(\x0e2\x0c.hbb.NatTypeH\0R\x07natType\x12\x1b\n\x08is_local\x18\
    \x06\x20\x01(\x08H\0R\x07isLocal\x12#\n\rother_failure\x18\x07\x20\x01(\
    \tR\x0cotherFailure\"S\n\x07Failure\x12\x10\n\x0cID_NOT_EXIST\x10\0\x12\
    \x0b\n\x07OFFLINE\x10\x02\x12\x14\n\x10LICENSE_MISMATCH\x10\x03\x12\x13\
    \n\x0fLICENSE_OVERUSE\x10\x04B\x07\n\x05union\"U\n\x0cConfigUpdate\x12\
    \x16\n\x06serial\x18\x01\x20\x01(\x05R\x06serial\x12-\n\x12rendezvous_se\
    rvers\x18\x02\x20\x03(\tR\x11rendezvousServers\"\xf1\x01\n\x0cRequestRel\
    ay\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04uuid\x18\x02\
    \x20\x01(\tR\x04uuid\x12\x1f\n\x0bsocket_addr\x18\x03\x20\x01(\x0cR\nsoc\
    ketAddr\x12!\n\x0crelay_server\x18\x04\x20\x01(\tR\x0brelayServer\x12\
    \x16\n\x06secure\x18\x05\x20\x01(\x08R\x06secure\x12\x1f\n\x0blicence_ke\
    y\x18\x06\x20\x01(\tR\nlicenceKey\x12*\n\tconn_type\x18\x07\x20\x01(\x0e\
    2\r.hbb.ConnTypeR\x08connType\x12\x14\n\x05token\x18\x08\x20\x01(\tR\x05\
    token\"\xd3\x01\n\rRelayResponse\x12\x1f\n\x0bsocket_addr\x18\x01\x20\
    \x01(\x0cR\nsocketAddr\x12\x12\n\x04uuid\x18\x02\x20\x01(\tR\x04uuid\x12\
    !\n\x0crelay_server\x18\x03\x20\x01(\tR\x0brelayServer\x12\x10\n\x02id\
    \x18\x04\x20\x01(\tH\0R\x02id\x12\x10\n\x02pk\x18\x05\x20\x01(\x0cH\0R\
    \x02pk\x12#\n\rrefuse_reason\x18\x06\x20\x01(\tR\x0crefuseReason\x12\x18\
    \n\x07version\x18\x07\x20\x01(\tR\x07versionB\x07\n\x05union\"\"\n\x0eSo\
    ftwareUpdate\x12\x10\n\x03url\x18\x01\x20\x01(\tR\x03url\"T\n\x0eFetchLo\
    calAddr\x12\x1f\n\x0bsocket_addr\x18\x01\x20\x01(\x0cR\nsocketAddr\x12!\
    \n\x0crelay_server\x18\x02\x20\x01(\tR\x0brelayServer\"\x98\x01\n\tLocal\
    Addr\x12\x1f\n\x0bsocket_addr\x18\x01\x20\x01(\x0cR\nsocketAddr\x12\x1d\
    \n\nlocal_addr\x18\x02\x20\x01(\x0cR\tlocalAddr\x12!\n\x0crelay_server\
    \x18\x03\x20\x01(\tR\x0brelayServer\x12\x0e\n\x02id\x18\x04\x20\x01(\tR\
    \x02id\x12\x18\n\x07version\x18\x05\x20\x01(\tR\x07version\"\xab\x01\n\r\
    PeerDiscovery\x12\x10\n\x03cmd\x18\x01\x20\x01(\tR\x03cmd\x12\x10\n\x03m\
    ac\x18\x02\x20\x01(\tR\x03mac\x12\x0e\n\x02id\x18\x03\x20\x01(\tR\x02id\
    \x12\x1a\n\x08username\x18\x04\x20\x01(\tR\x08username\x12\x1a\n\x08host\
    name\x18\x05\x20\x01(\tR\x08hostname\x12\x1a\n\x08platform\x18\x06\x20\
    \x01(\tR\x08platform\x12\x12\n\x04misc\x18\x07\x20\x01(\tR\x04misc\"5\n\
    \rOnlineRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x14\n\x05p\
    eers\x18\x02\x20\x03(\tR\x05peers\"(\n\x0eOnlineResponse\x12\x16\n\x06st\
    ates\x18\x01\x20\x01(\x0cR\x06states\"\xd2\t\n\x11RendezvousMessage\x128\
    \n\rregister_peer\x18\x06\x20\x01(\x0b2\x11.hbb.RegisterPeerH\0R\x0cregi\
    sterPeer\x12Q\n\x16register_peer_response\x18\x07\x20\x01(\x0b2\x19.hbb.\
    RegisterPeerResponseH\0R\x14registerPeerResponse\x12E\n\x12punch_hole_re\
    quest\x18\x08\x20\x01(\x0b2\x15.hbb.PunchHoleRequestH\0R\x10punchHoleReq\
    uest\x12/\n\npunch_hole\x18\t\x20\x01(\x0b2\x0e.hbb.PunchHoleH\0R\tpunch\
    Hole\x12<\n\x0fpunch_hole_sent\x18\n\x20\x01(\x0b2\x12.hbb.PunchHoleSent\
    H\0R\rpunchHoleSent\x12H\n\x13punch_hole_response\x18\x0b\x20\x01(\x0b2\
    \x16.hbb.PunchHoleResponseH\0R\x11punchHoleResponse\x12?\n\x10fetch_loca\
    l_addr\x18\x0c\x20\x01(\x0b2\x13.hbb.FetchLocalAddrH\0R\x0efetchLocalAdd\
    r\x12/\n\nlocal_addr\x18\r\x20\x01(\x0b2\x0e.hbb.LocalAddrH\0R\tlocalAdd\
    r\x12>\n\x10configure_update\x18\x0e\x20\x01(\x0b2\x11.hbb.ConfigUpdateH\
    \0R\x0fconfigureUpdate\x122\n\x0bregister_pk\x18\x0f\x20\x01(\x0b2\x0f.h\
    bb.RegisterPkH\0R\nregisterPk\x12K\n\x14register_pk_response\x18\x10\x20\
    \x01(\x0b2\x17.hbb.RegisterPkResponseH\0R\x12registerPkResponse\x12>\n\
    \x0fsoftware_update\x18\x11\x20\x01(\x0b2\x13.hbb.SoftwareUpdateH\0R\x0e\
    softwareUpdate\x128\n\rrequest_relay\x18\x12\x20\x01(\x0b2\x11.hbb.Reque\
    stRelayH\0R\x0crequestRelay\x12;\n\x0erelay_response\x18\x13\x20\x01(\
    \x0b2\x12.hbb.RelayResponseH\0R\rrelayResponse\x12?\n\x10test_nat_reques\
    t\x18\x14\x20\x01(\x0b2\x13.hbb.TestNatRequestH\0R\x0etestNatRequest\x12\
    B\n\x11test_nat_response\x18\x15\x20\x01(\x0b2\x14.hbb.TestNatResponseH\
    \0R\x0ftestNatResponse\x12;\n\x0epeer_discovery\x18\x16\x20\x01(\x0b2\
    \x12.hbb.PeerDiscoveryH\0R\rpeerDiscovery\x12;\n\x0eonline_request\x18\
    \x17\x20\x01(\x0b2\x12.hbb.OnlineRequestH\0R\ronlineRequest\x12>\n\x0fon\
    line_response\x18\x18\x20\x01(\x0b2\x13.hbb.OnlineResponseH\0R\x0eonline\
    ResponseB\x07\n\x05union*J\n\x08ConnType\x12\x10\n\x0cDEFAULT_CONN\x10\0\
    \x12\x11\n\rFILE_TRANSFER\x10\x01\x12\x10\n\x0cPORT_FORWARD\x10\x02\x12\
    \x07\n\x03RDP\x10\x03*9\n\x07NatType\x12\x0f\n\x0bUNKNOWN_NAT\x10\0\x12\
    \x0e\n\nASYMMETRIC\x10\x01\x12\r\n\tSYMMETRIC\x10\x02b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(20);
            messages.push(RegisterPeer::generated_message_descriptor_data());
            messages.push(RegisterPeerResponse::generated_message_descriptor_data());
            messages.push(PunchHoleRequest::generated_message_descriptor_data());
            messages.push(PunchHole::generated_message_descriptor_data());
            messages.push(TestNatRequest::generated_message_descriptor_data());
            messages.push(TestNatResponse::generated_message_descriptor_data());
            messages.push(PunchHoleSent::generated_message_descriptor_data());
            messages.push(RegisterPk::generated_message_descriptor_data());
            messages.push(RegisterPkResponse::generated_message_descriptor_data());
            messages.push(PunchHoleResponse::generated_message_descriptor_data());
            messages.push(ConfigUpdate::generated_message_descriptor_data());
            messages.push(RequestRelay::generated_message_descriptor_data());
            messages.push(RelayResponse::generated_message_descriptor_data());
            messages.push(SoftwareUpdate::generated_message_descriptor_data());
            messages.push(FetchLocalAddr::generated_message_descriptor_data());
            messages.push(LocalAddr::generated_message_descriptor_data());
            messages.push(PeerDiscovery::generated_message_descriptor_data());
            messages.push(OnlineRequest::generated_message_descriptor_data());
            messages.push(OnlineResponse::generated_message_descriptor_data());
            messages.push(RendezvousMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(4);
            enums.push(ConnType::generated_enum_descriptor_data());
            enums.push(NatType::generated_enum_descriptor_data());
            enums.push(register_pk_response::Result::generated_enum_descriptor_data());
            enums.push(punch_hole_response::Failure::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
